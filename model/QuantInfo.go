// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package model

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// for symetric quant, only max_value is used (also called threshold)
type QuantInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsQuantInfo(buf []byte, offset flatbuffers.UOffsetT) *QuantInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &QuantInfo{}
	x.Init(buf, n+offset)
	return x
}

func FinishQuantInfoBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsQuantInfo(buf []byte, offset flatbuffers.UOffsetT) *QuantInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &QuantInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedQuantInfoBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *QuantInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *QuantInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *QuantInfo) Type() QuantType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return QuantType(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *QuantInfo) MutateType(n QuantType) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *QuantInfo) MaxValue() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *QuantInfo) MutateMaxValue(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *QuantInfo) MinValue() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *QuantInfo) MutateMinValue(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func (rcv *QuantInfo) ZeroPoint() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *QuantInfo) MutateZeroPoint(n float32) bool {
	return rcv._tab.MutateFloat32Slot(10, n)
}

func (rcv *QuantInfo) Qscale() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *QuantInfo) MutateQscale(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func QuantInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func QuantInfoAddType(builder *flatbuffers.Builder, type_ QuantType) {
	builder.PrependByteSlot(0, byte(type_), 0)
}
func QuantInfoAddMaxValue(builder *flatbuffers.Builder, maxValue float32) {
	builder.PrependFloat32Slot(1, maxValue, 0.0)
}
func QuantInfoAddMinValue(builder *flatbuffers.Builder, minValue float32) {
	builder.PrependFloat32Slot(2, minValue, 0.0)
}
func QuantInfoAddZeroPoint(builder *flatbuffers.Builder, zeroPoint float32) {
	builder.PrependFloat32Slot(3, zeroPoint, 0.0)
}
func QuantInfoAddQscale(builder *flatbuffers.Builder, qscale float32) {
	builder.PrependFloat32Slot(4, qscale, 0.0)
}
func QuantInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
