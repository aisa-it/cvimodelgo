// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package model

import "strconv"

///
/// General Descriptions
/// Model:
///   A model is generated from one NN model, it contains one or more
///   `Segment`s, each `Segment` could be either a TPU segment or a CPU
///   segment. A Model takes one or more `Tensor`s as input, and produces
///   one or more `Tensor's as output. Along with `Segment`s, a list of
///   `Memory` and a list of `Tensor` are provided.
/// Segment:
///   A segment is a program running on a certain type of engine (`TPU` or
///   `CPU`), which takes a list of `Tensor`s as input, and produces a list
///   of `Tensor`s as output.
/// Memory:
///   Memorys are memory spaces that are holding actual data. `Memory`s are
///   passed among `Segment`s or passed as input/output of the `Model`. When
///   `size` field is present, `size` specifies the space that is needed. When
///   `size` is not present (or set to -1), the memory is dynamic shaped, and
///   runtime needs to derive size for the `Memory` after input shape has been
///   set.
/// Tensor:
///   Tensor is an abstract description of a chunk of data, with a specific
///   data type (DType) and shape, as well optional strides. Each Tensor is
///   bound to a `Memory` (with memory_id). When present, `offset` is used to
///   describe the relative address of the tensor within the `Memory`.
/// InputTensor/OutputTensor:
///   To describe the input/output tensors of the model, by referencing
///   tensor_id in tensor_list, along with preprocess_hints/postprocess_hints.
///   `preprocess_hints` are information on how input data should be processed
///   before passing to the model, and `postprocess_hints` are information on
///   how output data should be processed.
/// Program:
///   Program is the executive part of a `Segment`, 2 types of Programs are
///   defined, TpuProgram and CpuProgram.
/// TpuProgram:
///   A TpuProgram consists of `Cmdbuf` and `Weight`. To support different
///   batch_size or input image dimesions, multiple `Cmdbuf`s may be needed,
///   with each `Cmdbuf` handling one fixed batch_size and image dims. i.e.
///   on `Cmdbuf` level dynamic shape are not supported.
/// Cmdbuf:
///   Cmdbuf is a sequence of TPU instuctions.
/// Weight:
///   Weight is the trained weight data.
/// CpuProgram:
///   A CpuProgram consists of a cpu function and `Weight`. A function could
///   be either a runtime build-in function, or a plug-in library registered
///   along with the Model in the CpuFunction section.
/// CpuFunction:
///   A CpuFunction is a plug-in library registered along with the Model.
///
type MajorVersion byte

const (
	MajorVersionvalue MajorVersion = 1
)

var EnumNamesMajorVersion = map[MajorVersion]string{
	MajorVersionvalue: "value",
}

var EnumValuesMajorVersion = map[string]MajorVersion{
	"value": MajorVersionvalue,
}

func (v MajorVersion) String() string {
	if s, ok := EnumNamesMajorVersion[v]; ok {
		return s
	}
	return "MajorVersion(" + strconv.FormatInt(int64(v), 10) + ")"
}
