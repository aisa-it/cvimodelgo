// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package model

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///
/// color:
///   channel order for input image, valid values are `RGB`, `BGR`.
/// raw_scale:
///   a scale to apply before other proprocessing precedures
/// mean:
///   channel mean value, preprocess will substract the input by this value
/// std:
///   channel std value, preprocess will divide the input by this value
/// input_scale:
///   a scale to apply after other proprocessing precedures
///
type PreProcessHints struct {
	_tab flatbuffers.Table
}

func GetRootAsPreProcessHints(buf []byte, offset flatbuffers.UOffsetT) *PreProcessHints {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PreProcessHints{}
	x.Init(buf, n+offset)
	return x
}

func FinishPreProcessHintsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsPreProcessHints(buf []byte, offset flatbuffers.UOffsetT) *PreProcessHints {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PreProcessHints{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPreProcessHintsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *PreProcessHints) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PreProcessHints) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PreProcessHints) Color() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PreProcessHints) RawScale() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *PreProcessHints) MutateRawScale(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *PreProcessHints) Mean() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PreProcessHints) Std() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PreProcessHints) InputScale() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *PreProcessHints) MutateInputScale(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func (rcv *PreProcessHints) DataFormat() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func PreProcessHintsStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func PreProcessHintsAddColor(builder *flatbuffers.Builder, color flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(color), 0)
}
func PreProcessHintsAddRawScale(builder *flatbuffers.Builder, rawScale float32) {
	builder.PrependFloat32Slot(1, rawScale, 0.0)
}
func PreProcessHintsAddMean(builder *flatbuffers.Builder, mean flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(mean), 0)
}
func PreProcessHintsAddStd(builder *flatbuffers.Builder, std flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(std), 0)
}
func PreProcessHintsAddInputScale(builder *flatbuffers.Builder, inputScale float32) {
	builder.PrependFloat32Slot(4, inputScale, 0.0)
}
func PreProcessHintsAddDataFormat(builder *flatbuffers.Builder, dataFormat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(dataFormat), 0)
}
func PreProcessHintsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
