// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package model

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Section struct {
	_tab flatbuffers.Table
}

func GetRootAsSection(buf []byte, offset flatbuffers.UOffsetT) *Section {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Section{}
	x.Init(buf, n+offset)
	return x
}

func FinishSectionBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsSection(buf []byte, offset flatbuffers.UOffsetT) *Section {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Section{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSectionBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Section) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Section) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Section) Type() SectionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return SectionType(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Section) MutateType(n SectionType) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *Section) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Section) Size() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Section) MutateSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *Section) Offset() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Section) MutateOffset(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *Section) Encrypt() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Section) MutateEncrypt(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func (rcv *Section) Compress() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Section) MutateCompress(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func (rcv *Section) DecompressedSize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Section) MutateDecompressedSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(16, n)
}

func SectionStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func SectionAddType(builder *flatbuffers.Builder, type_ SectionType) {
	builder.PrependByteSlot(0, byte(type_), 0)
}
func SectionAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func SectionAddSize(builder *flatbuffers.Builder, size uint32) {
	builder.PrependUint32Slot(2, size, 0)
}
func SectionAddOffset(builder *flatbuffers.Builder, offset uint32) {
	builder.PrependUint32Slot(3, offset, 0)
}
func SectionAddEncrypt(builder *flatbuffers.Builder, encrypt bool) {
	builder.PrependBoolSlot(4, encrypt, false)
}
func SectionAddCompress(builder *flatbuffers.Builder, compress bool) {
	builder.PrependBoolSlot(5, compress, false)
}
func SectionAddDecompressedSize(builder *flatbuffers.Builder, decompressedSize uint32) {
	builder.PrependUint32Slot(6, decompressedSize, 0)
}
func SectionEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
