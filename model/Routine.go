// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package model

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Routine struct {
	_tab flatbuffers.Table
}

func GetRootAsRoutine(buf []byte, offset flatbuffers.UOffsetT) *Routine {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Routine{}
	x.Init(buf, n+offset)
	return x
}

func FinishRoutineBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsRoutine(buf []byte, offset flatbuffers.UOffsetT) *Routine {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Routine{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedRoutineBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Routine) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Routine) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Routine) Type() RoutineType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return RoutineType(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Routine) MutateType(n RoutineType) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *Routine) InTensors(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Routine) InTensorsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Routine) OutTensors(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Routine) OutTensorsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Routine) TpuRoutine(obj *TpuRoutine) *TpuRoutine {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TpuRoutine)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Routine) CpuRoutine(obj *CpuRoutine) *CpuRoutine {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(CpuRoutine)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func RoutineStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func RoutineAddType(builder *flatbuffers.Builder, type_ RoutineType) {
	builder.PrependByteSlot(0, byte(type_), 0)
}
func RoutineAddInTensors(builder *flatbuffers.Builder, inTensors flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(inTensors), 0)
}
func RoutineStartInTensorsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RoutineAddOutTensors(builder *flatbuffers.Builder, outTensors flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(outTensors), 0)
}
func RoutineStartOutTensorsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RoutineAddTpuRoutine(builder *flatbuffers.Builder, tpuRoutine flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(tpuRoutine), 0)
}
func RoutineAddCpuRoutine(builder *flatbuffers.Builder, cpuRoutine flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(cpuRoutine), 0)
}
func RoutineEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
