// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package model

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Weight struct {
	_tab flatbuffers.Table
}

func GetRootAsWeight(buf []byte, offset flatbuffers.UOffsetT) *Weight {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Weight{}
	x.Init(buf, n+offset)
	return x
}

func FinishWeightBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsWeight(buf []byte, offset flatbuffers.UOffsetT) *Weight {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Weight{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedWeightBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Weight) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Weight) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Weight) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Weight) Offset() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Weight) MutateOffset(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *Weight) Size() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Weight) MutateSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *Weight) Shape(obj *Shape) *Shape {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Shape)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Weight) Type() DType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return DType(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Weight) MutateType(n DType) bool {
	return rcv._tab.MutateByteSlot(12, byte(n))
}

func WeightStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func WeightAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func WeightAddOffset(builder *flatbuffers.Builder, offset int64) {
	builder.PrependInt64Slot(1, offset, 0)
}
func WeightAddSize(builder *flatbuffers.Builder, size uint32) {
	builder.PrependUint32Slot(2, size, 0)
}
func WeightAddShape(builder *flatbuffers.Builder, shape flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(shape), 0)
}
func WeightAddType(builder *flatbuffers.Builder, type_ DType) {
	builder.PrependByteSlot(4, byte(type_), 0)
}
func WeightEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
