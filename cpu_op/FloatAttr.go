// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package cpu_op

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FloatAttr struct {
	_tab flatbuffers.Table
}

func GetRootAsFloatAttr(buf []byte, offset flatbuffers.UOffsetT) *FloatAttr {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FloatAttr{}
	x.Init(buf, n+offset)
	return x
}

func FinishFloatAttrBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsFloatAttr(buf []byte, offset flatbuffers.UOffsetT) *FloatAttr {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FloatAttr{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedFloatAttrBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *FloatAttr) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FloatAttr) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FloatAttr) Key() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FloatAttr) Value() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *FloatAttr) MutateValue(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func FloatAttrStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func FloatAttrAddKey(builder *flatbuffers.Builder, key flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(key), 0)
}
func FloatAttrAddValue(builder *flatbuffers.Builder, value float32) {
	builder.PrependFloat32Slot(1, value, 0.0)
}
func FloatAttrEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
